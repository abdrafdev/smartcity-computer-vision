[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "smartcity-computer-vision"
version = "1.0.0"
authors = [
    {name = "Abdul Rafay", email = "abdrafdev@gmail.com"},
]
description = "AI-powered computer vision solutions for smart city applications"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "computer-vision", "yolo", "smart-city", "object-detection", 
    "garbage-detection", "helmet-detection", "traffic-monitoring",
    "artificial-intelligence", "machine-learning", "deep-learning"
]
dependencies = [
    "ultralytics>=8.0.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "opencv-python>=4.5.0",
    "pillow>=9.0.0",
    "numpy>=1.21.0",
    "matplotlib>=3.5.0",
    "pandas>=1.3.0",
    "pyyaml>=6.0",
    "tqdm>=4.62.0",
    "seaborn>=0.11.0",
    "opencv-contrib-python>=4.5.0",
    "pathlib2>=2.3.0",
    "requests>=2.25.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=3.0.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=2.15.0"
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0"
]
monitoring = [
    "prometheus-client>=0.14.0",
    "grafana-api>=1.0.3"
]
database = [
    "psycopg2-binary>=2.9.0",
    "sqlalchemy>=1.4.0",
    "alembic>=1.8.0"
]

[project.urls]
"Homepage" = "https://github.com/abdrafdev/smartcity-computer-vision"
"Bug Reports" = "https://github.com/abdrafdev/smartcity-computer-vision/issues"
"Source" = "https://github.com/abdrafdev/smartcity-computer-vision"
"Documentation" = "https://smartcity-computer-vision.readthedocs.io/"

[project.scripts]
smartcity-cv = "demo:main"
smartcity-train = "config:main"
smartcity-evaluate = "evaluate:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["utils*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/site-packages/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]